/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export default {
  route: {
    dashboard: '首页',
    introduction: '简述',
    documentation: '文档',
    guide: '引导页',
    permission: '权限测试页',
    pagePermission: '页面权限',
    directivePermission: '指令权限',
    icons: '图标',
    components: '组件',
    componentIndex: '介绍',
    tinymce: '富文本编辑器',
    markdown: 'Markdown',
    jsonEditor: 'JSON编辑器',
    dndList: '列表拖拽',
    splitPane: 'Splitpane',
    avatarUpload: '头像上传',
    dropzone: 'Dropzone',
    sticky: 'Sticky',
    countTo: 'CountTo',
    componentMixin: '小组件',
    backToTop: '返回顶部',
    dragDialog: '拖拽 Dialog',
    dragSelect: '拖拽 Select',
    dragKanban: '可拖拽看板',
    charts: '图表',
    keyboardChart: '键盘图表',
    lineChart: '折线图',
    mixChart: '混合图表',
    example: '综合实例',
    nested: '路由嵌套',
    menu1: '菜单1',
    'menu1-1': '菜单1-1',
    'menu1-2': '菜单1-2',
    'menu1-2-1': '菜单1-2-1',
    'menu1-2-2': '菜单1-2-2',
    'menu1-3': '菜单1-3',
    menu2: '菜单2',
    Table: 'Table',
    dynamicTable: '动态Table',
    dragTable: '拖拽Table',
    inlineEditTable: 'Table内编辑',
    complexTable: '综合Table',
    treeTable: '树形表格',
    customTreeTable: '自定义树表',
    tab: 'Tab',
    form: '表单',
    createArticle: '创建文章',
    editArticle: '编辑文章',
    articleList: '文章列表',
    errorPages: '错误页面',
    page401: '401',
    page404: '404',
    errorLog: '错误日志',
    excel: 'Excel',
    exportExcel: 'Export Excel',
    selectExcel: 'Export Selected',
    uploadExcel: 'Upload Excel',
    zip: 'Zip',
    exportZip: 'Export Zip',
    theme: '换肤',
    clipboardDemo: 'Clipboard',
    i18n: '国际化',
    externalLink: '外链'
  },
  navbar: {
    logOut: '退出登录',
    dashboard: '首页',
    github: '项目地址',
    screenfull: '全屏',
    theme: '换肤',
    size: '布局大小'
  },
  login: {
    title: '系统登录',
    logIn: '登录',
    username: '账号',
    password: '密码',
    any: '随便填',
    thirdparty: '第三方登录',
    thirdpartyTips: '本地不能模拟，请结合自己业务进行模拟！！！'
  },
  sidebar: {
    clusters: 'Clusters',
    clusterInfo: 'Cluster Details',
    tenants: 'Tenants',
    namespaces: 'Namespaces',
    topics: 'Topics'
  },
  documentation: {
    documentation: '文档',
    github: 'Github 地址'
  },
  permission: {
    roles: '你的权限',
    switchRoles: '切换权限'
  },
  guide: {
    description: '引导页对于一些第一次进入项目的人很有用，你可以简单介绍下项目的功能。本 Demo 是基于',
    button: '打开引导'
  },
  components: {
    documentation: '文档',
    tinymceTips: '富文本是管理后台一个核心的功能，但同时又是一个有很多坑的地方。在选择富文本的过程中我也走了不少的弯路，市面上常见的富文本都基本用过了，最终权衡了一下选择了Tinymce。更详细的富文本比较和介绍见',
    dropzoneTips: '由于我司业务有特殊需求，而且要传七牛 所以没用第三方，选择了自己封装。代码非常的简单，具体代码你可以在这里看到 @/components/Dropzone',
    stickyTips: '当页面滚动到预设的位置会吸附在顶部',
    backToTopTips1: '页面滚动到指定位置会在右下角出现返回顶部按钮',
    backToTopTips2: '可自定义按钮的样式、show/hide、出现的高度、返回的位置 如需文字提示，可在外部使用Element的el-tooltip元素',
    imageUploadTips: '由于我在使用时它只有vue@1版本，而且和mockjs不兼容，所以自己改造了一下，如果大家要使用的话，优先还是使用官方版本。'
  },
  table: {
    dynamicTips1: '固定表头, 按照表头顺序排序',
    dynamicTips2: '不固定表头, 按照点击顺序排序',
    dragTips1: '默认顺序',
    dragTips2: '拖拽后顺序',
    title: '标题',
    importance: '重要性',
    type: '类型',
    remark: '点评',
    search: '搜索',
    add: '添加',
    export: '导出',
    reviewer: '审核人',
    id: '序号',
    date: '时间',
    author: '作者',
    readings: '阅读数',
    status: '状态',
    actions: '操作',
    edit: '编辑',
    publish: '发布',
    draft: '草稿',
    delete: '删除',
    cancel: '取 消',
    confirm: '确 定',
    name: '名称',
    serviceUrl: '服务地址',
    brokerServiceUrl: 'broker服务地址',
    tenant: '租户',
    namespace: '名称空间',
    role: '角色',
    clusters: '集群',
    addRole: '增加角色',
    addCluster: '增加集群',
    config: '配置',
    policies: '策略',
    description: '说明',
    update: '更新',
    topic: '主题',
    stats: '统计',
    partition: '分区',
    cluster: '集群',
    subscription: '订阅',
    unsubscription: '取消订阅',
    grant: '授权',
    limit: '限制',
    schemas: '模型',
    brokers: '代理',
    internalConfig: '内部配置',
    runtimeConfig: '运行配置',
    dynamicConfig: '动态配置',
    healthCheck: '健康检查',
    functions: '函数',
    start: '启动',
    stop: '停止',
    restart: '重启',
    trigger: '触发器',
    configName: '配置名称',
    configValue: '配置值',
    sources: '源',
    builtin: '内建',
    sinks: 'Sink',
    quotas: '配额',
    monitor: '监控',
    allowedClusters: 'Allowed Clusters',
    adminRoles: 'Admin Roles'
  },
  errorLog: {
    tips: '请点击右上角bug小图标',
    description: '现在的管理后台基本都是spa的形式了，它增强了用户体验，但同时也会增加页面出问题的可能性，可能一个小小的疏忽就导致整个页面的死锁。好在 Vue 官网提供了一个方法来捕获处理异常，你可以在其中进行错误处理或者异常上报。',
    documentation: '文档介绍'
  },
  excel: {
    export: '导出',
    selectedExport: '导出已选择项',
    placeholder: '请输入文件名(默认excel-list)'
  },
  zip: {
    export: '导出',
    placeholder: '请输入文件名(默认file)'
  },
  theme: {
    change: '换肤',
    documentation: '换肤文档',
    tips: 'Tips: 它区别于 navbar 上的 theme-pick, 是两种不同的换肤方法，各自有不同的应用场景，具体请参考文档。'
  },
  tagsView: {
    refresh: '刷新',
    close: '关闭',
    closeOthers: '关闭其它',
    closeAll: '关闭所有'
  },
  breadcrumb: {
    management: 'Management',
    clusters: 'Clusters',
    clusterInfo: 'Cluster Details',
    brokers: 'Brokers',
    brokerInfo: 'Broker Details',
    isolationPolicies: 'Isolation Policies',
    isolationPolicyInfo: 'Isolation Policy Details',
    failureDomains: 'Failure Domains',
    failureDomainInfo: 'Faillure Domain Details',
    tenants: 'Tenants',
    tenantInfo: 'Tenant Details',
    namespaces: 'Namespaces',
    namespaceInfo: 'Namespace Details',
    topics: 'Topics',
    topicInfo: 'Topic Details',
    subscriptions: 'Subscriptions',
    subscriptionInfo: 'Subscription Details'
  },
  tabs: {
    config: 'CONFIG',
    broker: 'BROKER',
    bookie: 'BOOKIE',
    namespace: 'NAMESPACE',
    overview: 'OVERVIEW',
    topic: 'TOPICS',
    policies: 'POLICIES',
    configuration: 'CONFIGURATION',
    failuredomains: 'FAILURE DOMAINS',
    isolationpolicies: 'ISOLATION POLICIES',
    storage: 'STORAGE'
  },
  role: {
    roleAlreadyExists: 'Role already exists'
  },
  role_actions: {
    consume: 'consume',
    produce: 'produce',
    functions: 'functions'
  },
  subscription_auth_mode: {
    none: 'None',
    prefix: 'Prefix'
  },
  backlog_policy: {
    consumer_backlog_eviction: 'consumer_backlog_eviction',
    producer_exception: 'producer_exception',
    producer_request_hold: 'producer_request_hold'
  },
  schema_bc: {
    full: 'Full',
    forward: 'Forward',
    backward: 'Backward',
    always: 'Always Compatible',
    auto_update_disabled: 'AutoUpdate Disabled',
    backward_transitive: 'Backward Transitive',
    forward_transitive: 'Forward Transitive',
    full_transitive: 'Full Transitive'
  },
  common: {
    dangerZone: 'Danger Zone',
    actions: 'Actions',
    clusterLabel: 'Cluster',
    namespacesLabel: 'Namespaces',
    regex: 'Regex',
    inMsg: 'In - msg/s',
    outMsg: 'Out - msg/s',
    inBytes: 'In - bytes/s',
    outBytes: 'Out - bytes/s',
    storageSize: 'Storage Size',
    enabled: 'Enabled',
    disabled: 'Disabled'
  },
  tenant: {
    label: 'Tenant',
    name: 'Tenant Name',
    searchTenant: 'Search Tenants',
    newTenant: 'New Tenant',
    deleteTenant: 'Delete Tenant',
    nameLabel: 'Tenant Name',
    adminRolesLabel: 'Admin Roles',
    allowedClustersLabel: 'Allowed Clusters',
    selectTenantMessage: 'Please select tenant',
    deleteTenantMessage: 'Are you sure you want to delete this tenant?',
    tenantInfo: 'Tenant Info',
    allowedClustersContent: 'This is Allowed Clusters Content',
    adminRolesContent: 'This is Admin Roles Content',
    permissions: 'Permissions',
    newRole: '+ New Role',
    tenantIsRequired: 'Tenant Name is required',
    clusterIsRequired: 'Please select allowed clusters for a tenant',
    createTenantSuccessNotification: 'Successfully create a tenant',
    deleteTenantSuccessNotification: 'Successfully delete a tenant',
    roleAlreadyExists: 'Role already exists',
    updateRolesSuccessNotification: 'Successfully update roles for this tenant',
    updateClustersSuccessNotification: 'Successfully update allowed clusters for this tenant'
  },
  namespace: {
    label: 'Namespace',
    name: 'Namespace Name',
    namespaceNumber: 'Namespace Number',
    newNamespace: 'New Namespace',
    deleteNamespace: 'Delete Namespace',
    inputNamespaceMessage: 'Please input namespace',
    newTopic: 'New Topic',
    searchTopics: 'Search Topics',
    deleteNamespaceMessage: 'Are you sure you want to delete this namespace?',
    namespaceNameIsRequired: 'Namespace name is required',
    createNsSuccessNotification: 'Successfully create a namespace',
    deleteNsSuccessNotification: 'Successfully delete the namespace',
    searchNamespaces: 'Search namespaces',
    policy: {
      label: 'Policy',
      name: 'Policy Name',
      cluster: 'Clusters',
      replicatedCluster: 'Replicated Clusters',
      replicatedClustersContent: 'This is replicatedClustersContent',
      authorization: 'Authorization',
      authorizationContent: 'This is authorizationContent',
      selectRole: 'Please select role',
      deleteRole: 'Delete Role',
      addRole: 'Add Role',
      subscriptionAuthentication: 'Subscription Authentication',
      subscriptionAuthenticationMode: 'Subscription Authentication Mode',
      subscriptionAuthenticationModeContent: 'This is subscriptionAuthenticationModeContent',
      storage: 'Storage',
      replicationFactor: 'Replication Factor',
      replicationFactorContent: 'This is replicationFactorContent',
      ensembelSize: 'Ensembel Size',
      inputEnsemble: 'Please input ensembel',
      writeQuorumSize: 'Write Quorum Size',
      inputWriteQuorumSize: 'Please input Write Quorum Size',
      readQuorumSize: 'Read Quorum Size',
      inputReadQuorumSize: 'Please input Read Quorum Size',
      markDeleteRate: 'Mark Delete Rate',
      markDeleteRateContent: 'This is markDeleteRateContent',
      inputDeleteMaxRate: 'Please input Delete Max Rate',
      encryptionRequire: 'Encryption Require',
      encryptionRequireContent: 'This is encryptionRequireContent',
      deduplication: 'Deduplication',
      deduplicationContent: 'This is deduplicationContent',
      backlog: 'Backlog',
      backlogQuotasLimit: 'Backlog Quotas Limit',
      backlogQuotasLimitContent: 'This is backlogQuotasLimitContent',
      inputBacklogQuotasLimit: 'Please input Backlog Quotas Limit',
      backlogRententionPolicy: 'Backlog Retention Policy',
      backlogRententionPolicyContent: 'This is backlogRententionPolicyContent',
      inputBacklogRententionPolicyContent: 'Please select backlog rentention policy',
      schema: 'Schema',
      autoUpdateStrategy: 'AutoUpdate Strategy',
      autoUpdateStrategyContent: 'This is autoUpdateStrategyContent',
      inputAutoUpdateStrategy: 'Please select backlog autoUpdate strategy',
      schemaValidationEnforced: 'Schema Validation Enforced',
      schemaValidationEnforcedContent: 'This is schemaValidationEnforcedContent',
      cleanupPolicy: 'Cleanup Policy',
      messageTTL: 'Message TTL(Unit Second)',
      messageTTLContent: 'This is messageTTLContent',
      inputMessageTTL: 'Please input Backlog Quotas Limit',
      retentionSize: 'Retention Size',
      retentionSizeContent: 'This is retentionSizeContent',
      inputRententionSize: 'Please input retention size',
      retentionTime: 'Retention Time(Unit Minutes)',
      retentionTimeContent: 'This is retentionTimeContent',
      inputRetentionTime: 'Please input Retention Time',
      compactionThreshold: 'Compaction Threshold',
      compactionThresholdContent: 'This is compactionThresholdContent',
      inputCompactionThreshold: 'Please input compaction threshold',
      offloadThreshold: 'Offload Threshold',
      offloadThresholdContent: 'This is offloadThresholdContent',
      inputOffloadThreshold: 'Please input Offload Threshold',
      offloadDeletionLag: 'Offload Deletion Lag',
      offloadDeletionLagContent: 'This is offloadDeletionLagContent',
      inputOffloadDeleteLag: 'Please input offload delete lag',
      throttling: 'Throttling',
      maxProducersPerTopic: 'Max Producers Per Topic',
      maxProducersPerTopicContent: 'This is maxProducersPerTopicContent',
      inputMaxProducersPerTopic: 'Please input max Producers',
      maxConsumersPerTopic: 'Max Consumers Per Topic',
      maxConsumersPerTopicContent: 'This is maxConsumersPerTopicContent',
      inputMaxConsumersForTopic: 'Please input max Consumers for topic',
      maxConsumerPerSubscription: 'Max Consumers Per Subscription',
      maxConsumerPerSubContent: 'This is maxConsumerPerSubContent',
      inputMaxConsumersForSub: 'Please input max consumer for sub',
      dispatchRate: 'Dispatch Rate',
      dispatchRatePerTopic: 'Dispatch Rate Per Topic',
      dispatchRatePerTopicContent: 'This is dispatchRatePerTopicContent',
      dispatchRatePerTopicBytes: 'bytes/second',
      inputDispatchRateBytes: 'Please input dispatch rate',
      dispatchRatePerTopicMessage: 'message/second',
      inputDispatchRatePerTopicMessage: 'Please input dispatch rate',
      dispatchRatePerTopicPeriod: 'period(Unit second)',
      inputDispatchPerTopicPerPeriod: 'Please input dispatch rate',
      dispatchRateForSub: 'Dispatch Rate Per Subscription',
      dispatchRatePerSubContent: 'This is dispatchRatePerSubContent',
      inputDispatchRatePerSubBytes: 'Please input dispatch rate',
      dispatchRatePerSubBytes: 'bytes/second',
      dispatchRatePerSubMessage: 'message/second',
      inputDispatchRatePerSubMessage: 'Please input dispatch rate',
      dispatchRatePerSubPeriod: 'period(Unit Second)',
      inputDispatchRatePerSubPeriod: 'Please input dispatch rate',
      subscribeRatePerConsumer: 'Subscribe Rate Per Consumer',
      subscribeRatePerConsumerSub: 'message/second',
      inputSubscribeRate: 'Please input subscribe rate',
      subscribeRatePerConsumerContent: 'This is subscribeRatePerConsumerContent',
      subscribeRatePerConsumerPeriod: 'period(Unit Second)',
      antiAffinity: 'Anti Affinity',
      antiAffinityGroup: 'Anti Affinity Group',
      antiAffinityGroupContent: 'This is antiAffinityGroupContent',
      inputAntiAffinityGroup: 'Please input Anti Affinity Group',
      roleAlreadyExists: 'This role already exists'
    },
    clearBacklog: 'Clear Backlog',
    bundle: {
      label: 'Bundle',
      name: 'Bundle Name',
      operation: 'Operation',
      split: 'Split',
      unload: 'Unload',
      bundleInfoContent: 'This is Bundle Info'
    },
    notification: {
      updatePersistenceSuccess: 'Successfully update persistence settings for this namespace!',
      updateBacklogQuotaSuccess: 'Successfully update backlog quota settings for this namespace!',
      splitBundleSuccess: 'Successfully split a namespace bundle for this namespace!',
      unloadAllBundlesSuccess: 'Successfully unload all the namespace bundles for this namespace!',
      unloadBundleSuccess: 'Successfully unload a namespace bundle for this namespace!',
      clearBacklogSuccess: 'Successfully clear backlog for this namespace!',
      clearBundleBacklogSuccess: 'Successfully clear backlog of a namespace bundle for this namespace!',
      updateReplicatedClustersSuccess: 'Successfully update replicated clusters for this namespace!',
      updateSubscriptionAuthModeSuccess: 'Successfully update subscription authentication mode for this namespace!',
      addRoleSuccess: 'Successfully add a role for this namespace!',
      removeRoleSuccess: 'Successfully remove a role from this namespace!',
      updateSchemaAutoUpdateStrategySuccess: 'Successfully change schema auto-update strategy for this namespace!',
      enableSchemaValidationEnforcedSuccess: 'Successfully enable schema validation for this namespace!',
      disableSchemaValidationEnforcedSuccess: 'Successfully disable schema validation for this namespace!',
      updateMessageTTLSuccess: 'Successfully set message TTL for this namespace!',
      updateRetentionSuccess: 'Successfully set message retention policy for this namespace!',
      updateCompactionThresholdSuccess: 'Successfully set compaction threshold for this namespace!',
      updateOffloadThresholdSuccess: 'Successfully set offload threshold for this namespace!',
      updateOffloadDeletionLagSuccess: 'Successfully update offload deletion lag for this namespace!',
      setMaxProducersSuccess: 'Successfully set max producers per topic for this namespace!',
      setMaxConsumersSuccess: 'Successfully set max consumers per topic for this namespace!',
      setMaxConsumersPerSubscriptionSuccess: 'Successfully set max consumers per subscription for this namespace!',
      setDispatchRateSuccess: 'Successfully set max dispatch rate per topic for this namespace!',
      setDispatchRatePerSubscriptionSuccess: 'Successfully set max dispatch rate per subscription for this namespace!',
      setSubscribeRateSuccess: 'Successfully set max subscribe rate per topic for this namespace!',
      setAntiAffinityGroupSuccess: 'Successfully set anti-affinity group for this namespace!',
      enableEncryptionSuccess: 'Successfully enable message encryption for this namespace!',
      disableEncryptionSuccess: 'Successfully disable message encryption for this namespace!',
      enableDeduplicationSuccess: 'Successfully enable message de-duplication for this namespace!',
      disableDeduplicationSuccess: 'Successfully disable message de-duplication for this namespace!'
    }
  },
  topic: {
    label: 'Topic',
    name: 'Topic Name',
    topicName: 'Topic Name',
    topicNumber: 'Topics',
    newTopic: 'New Topic',
    deleteTopic: 'Delete Topic',
    delete: 'Delete',
    persistent: 'Persistent',
    nonPersistent: 'Non-persistent',
    partition: 'Partition',
    partitions: 'Partitions',
    partitionNumber: 'Partition Number',
    topicDomain: 'Topic Domain',
    addRole: 'Add Role',
    producer: {
      label: 'Producer',
      name: 'Producer Name',
      producers: 'Producers',
      producerId: 'Producer Id',
      producerName: 'Producer Name',
      producerNumber: 'Producer Number',
      avgMsgSize: 'Avg Msg Size',
      address: 'Address',
      since: 'Since'
    },
    subscription: {
      label: 'Subscription',
      name: 'Subscription Name',
      subscriptions: 'Subscriptions',
      type: 'Type',
      subscriptionNumber: 'Subscription Number',
      msgExpired: 'Msg Expired',
      backlog: 'Backlog',
      skip: 'SKIP',
      skipMessage: 'Messages',
      expire: 'EXPIRE',
      expireMessage: 'messages older than timestamp (in seconds)',
      clear: 'CLEAR',
      clearMessage: 'Clear Message',
      reset: 'RESET',
      resetByTimeMessage: 'Reset By Time',
      resetById: 'Reset By Message Id',
      messageId: 'Message ID',
      mins: 'Mins',
      storage: 'STORAGE',
      storageSize: 'Storage Size',
      entries: 'Entries',
      segments: 'Segments'
    },
    segment: {
      label: 'Segment',
      name: 'Segment Name',
      ledgerId: 'Ledger Id',
      entries: 'Entries',
      size: 'Size',
      status: 'Status',
      offload: 'Offload'
    },
    cursor: {
      label: 'Cursor',
      name: 'Cursor Name',
      cursors: 'Cursors',
      markDeletePosition: 'Mark Delete Position',
      readPosition: 'Read Position',
      waitingReadOp: 'Waiting Read Op',
      pendingReadOp: 'Pending Read Op',
      numberOfEntriesSinceFirstNotAckedMessage: 'Entries Since First Not AckedMessage'
    },
    policy: {
      label: 'policy',
      name: 'Policy Name',
      policies: 'Policies',
      authentication: 'Authorization',
      authorizationContent: 'This is authorizationContent'
    },
    consumer: {
      label: 'Consumer',
      name: 'Consumer Name',
      consumers: 'Consumers',
      avgMsgSize: 'Avg Msg Size',
      address: 'Address',
      since: 'Since'
    },
    notification: {
      createTopicSuccess: 'Successfully create a topic!',
      deleteTopicSuccess: 'Successfully delete the topic!',
      deletePartitionedTopicSuccess: 'Successfully delete the partitioned topic!',
      unloadTopicSuccess: 'Successfully unload the topic!',
      terminateTopicSuccess: 'Successfully terminate the topic!',
      startCompactionSuccess: 'Successfully start compacting the topic!',
      startOffloadSuccess: 'Successfully start offloading the topic!'
    },
    info: 'INFO',
    column: 'column',
    data: 'data',
    terminate: 'terminate',
    compactionName: 'COMPACTION',
    compaction: 'compaction',
    offloadName: 'OFFLOAD',
    offload: 'offload',
    status: 'STATUS',
    unload: 'Unload',
    deleteTopicMessage: 'Are you sure you want to delete this topic?',
    partitionedTopicName: 'Partitioned Topic Name',
    selectRoleMessage: 'Please Select Role',
    backlogOpeartion: 'Backlog Operation'
  },
  cluster: {
    label: 'Cluster',
    name: 'Cluster Name',
    addCluster: 'Add Cluster',
    updateCluster: 'Update Cluster',
    deleteCluster: 'Delete Cluster',
    searchClusters: 'Search Clusters',
    selectCluster: 'Please select cluster',
    serviceUrl: 'Service Url',
    selectClusterMessage: 'Please select clusters',
    webServiceUrlPrefix: 'Http Service Url',
    webServiceUrlTlsPrefix: 'Https Service Url',
    brokerServiceUrlPrefix: 'Broker Service Url',
    brokerServiceUrlTlsPrefix: 'Broker Service Url (TLS)',
    deleteClusterMessage: 'Are you sure you want to delete this policy?',
    replicatedCluster: 'Replicated Clusters',
    addClusterSuccessNotification: 'Successfully add a cluster',
    deleteClusterSuccessNotification: 'Successfully delete a cluster',
    clusterNameIsRequired: 'Cluster name is required',
    serviceUrlIsRequired: 'Service URL is required',
    deleteClusterDialogCaption: 'Delete Cluster',
    updateClusterSuccessNotification: 'Successfully update a cluster'
  },
  broker: {
    label: 'Broker',
    name: 'Broker Name',
    brokerNumber: 'Broker Number',
    ownedNamespaceNumber: 'Owned Namespace Number',
    throughput: 'Throughput',
    bandwidth: 'Bandwidth',
    placeholderSelectBroker: 'Please select brokers',
    brokerContent: 'This is Broker Content'
  },
  bookie: {
    label: 'Bookie',
    name: 'Bookie Name',
    state: 'Bookie state',
    storage: 'Bookie storage'
  },
  // failure domain
  fd: {
    label: 'Failure Domain',
    failureDomainNumber: 'Failure Domain Number',
    createFdTitle: 'Add a New Failure Domain',
    name: 'Domain Name',
    brokerList: 'Broker List',
    selectBrokers: 'Please select brokers',
    searchFds: 'Search Failure Domains',
    newFd: 'New FailureDomain',
    updateFd: 'Update Failure Domain',
    deleteFd: 'Delete Failure Domain',
    deleteFdMessage: 'Are you sure you want to delete this domain?',
    domainNameIsRequired: 'Domain Name is required',
    deleteDomainDialogCaption: 'Delete Failure Domain',
    createFdSuccessNotification: 'Successfully create a failure domain',
    deleteFdSuccessNotification: 'Successfully delete a failure domain',
    updateFdSuccessNotification: 'Successfully update a failure domain'
  },
  // isolation policies
  ip: {
    label: 'Policy',
    heading: 'Namespace Isolation Policy',
    name: 'Policy Name',
    searchIps: 'Search Isolation Policies',
    selectIp: 'Select Isolation Policy',
    newIp: 'New Isolation Policy',
    nameLabel: 'Isolation Policy',
    numPBLabel: 'Number of Primary Brokers',
    numSBLabel: 'Number of Secondary Brokers',
    newIpName: 'Please input policy name',
    selectNsLabel: 'Select Namespaces',
    selectPbLabel: 'Select Brokers',
    selectSbLabel: 'Select Brokers',
    selectAfpPh: 'Please select auto failover policy',
    pbHeading: 'Primary Brokers',
    sbHeading: 'Secondary Brokers',
    afpHeading: 'Auto Failover Policy',
    ptHeading: 'Policy Type',
    brokerUsageThresholdLabel: 'Broker Usage Threshold',
    brokerUsageThresholdPh: 'Please input broker usage threshold',
    minimalAvailableBrokerLabel: 'Minimal Available Brokers',
    minimalAvailableBrokerPh: 'Please input minimalAvailableBroker',
    deletePolicyMessage: 'Are you sure you want to delete this policy?',
    deletePolicyDialogCaption: 'Delete Isolation Policy',
    deletePolicySuccessNotification: 'Successfully delete an isolation policy',
    policyNameCannotBeEmpty: 'Policy name cannot be empty',
    regexCannotBeEmpty: 'Namespace regex cannot be empty',
    nsRegexAlreadyExists: 'Namespace regex already exists',
    primaryBrokerRegexCannotBeEmpty: 'Primary broker regex cannot be empty',
    primaryBrokerRegexAlreadyExists: 'Primary broker regex already exists',
    secondaryBrokerRegexCannotBeEmpty: 'Secondary broker regex cannot be empty',
    secondaryBrokerRegexAlreadyExists: 'Secondary broker regex already exists',
    numLimitShouldGreaterThan0: 'Minimal available brokers should be greater than 0',
    usageThresholdShouldGreaterThan0: 'Broker usage threshold should be greater than 0',
    updatePolicySuccessNotification: 'Successfully update an ioslation policy'
  },
  // environment
  env: {
    buttonNewEnv: 'New Environment',
    colHeadingEnv: 'Environment Name',
    colHeadingServiceUrl: 'Service URL',
    newEnvDialogCaption: 'New Environment',
    newEnvNamePlaceHolder: 'Please input environment name',
    newEnvNameLabel: 'Environment Name',
    newEnvServiceUrlPlaceHolder: 'Please input environment service url',
    newEnvServiceUrlLabel: 'Service URL',
    updateEnvDialogCaption: 'Update Environment',
    updateEnvNameLabel: 'Environment Name',
    updateEnvServiceUrlPlaceHolder: 'Please input environment service url',
    updateEnvServiceUrlLabel: 'Service URL',
    deleteEnvDialogCaption: 'Delete Environment',
    deleteEnvDialogText: 'Are you sure you want to delete this environment?',
    envNameIsRequired: 'Environment Name is required',
    serviceUrlIsRequired: 'Service URL is required',
    addEnvSuccessNotification: 'Successfully add an environment',
    deleteEnvSuccessNotification: 'Successfully delete an environment',
    updateEnvSuccessNotification: 'Successfully update an environment'
  }
}
